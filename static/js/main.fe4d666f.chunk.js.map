{"version":3,"sources":["Components/InfoBox.js","Components/Table.js","util.js","Components/Map.js","Components/LineGraph.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","Table","countries","console","log","map","country","numeral","format","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","Map","casesType","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","LineGraph","useState","setData","options","legend","display","elements","points","maintainAspectRatio","tooltips","mode","intersect","callbacks","lable","tooltipItem","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","value","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","borderColor","backgroundColor","Footer","href","target","App","setContries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","caseType","setCaseType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe4d666f.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardContent, Typography } from '@material-ui/core'\n\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\n    return (\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\n            <CardContent>\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React from 'react'\nimport numeral from 'numeral'\n\n\nfunction Table({ countries }) {\n    console.log(\"Sss>\", countries)\n    return (\n        <div className=\"table\">\n            {countries.map(({ country, cases }) => (\n                <tr>\n                    <td>{country}</td>\n                    <td>{numeral(cases).format(\"0,0\")}</td>\n                </tr>\n            ))}\n        </div >\n    )\n}\n\nexport default Table\n","import React from 'react'\nimport { Circle, Popup } from \"react-leaflet\";\nimport numeral from 'numeral'\n\nconst casesTypeColors = {\n    cases: {\n        hex: \"#CC1034\",\n        rgb: \"rgb(204, 16, 52)\",\n        half_op: \"rgba(204, 16, 52, 0.5)\",\n        multiplier: 800,\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        rgb: \"rgb(125, 215, 29)\",\n        half_op: \"rgba(125, 215, 29, 0.5)\",\n        multiplier: 1200,\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        rgb: \"rgb(251, 68, 67)\",\n        half_op: \"rgba(251, 68, 67, 0.5)\",\n        multiplier: 2000,\n    },\n};\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    return sortedData.sort((a, b) => (a.cases > b.cases) ? -1 : 1)\n}\n\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n    data.map((country) => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            fillOpacity={0.4}\n            radius={\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n            }\n        >\n            <Popup>\n                <div className=\"info-container\">\n                    <div className=\"info-flag\"\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                </div>\n            </Popup>\n        </Circle>\n    ))\n","import React from 'react'\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet'\nimport { showDataOnMap } from '../util'\n\nfunction Map({ countries, casesType, center, zoom }) {\n    console.log(\"sss>>s\", countries)\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div >\n    )\n}\n\nexport default Map\n","import React, { useEffect, useState } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport numeral from \"numeral\"\n\n\nfunction LineGraph({ casesType = \"cases\", ...props }) {\n    console.log(\"linegraph>>\", casesType)\n    const [data, setData] = useState({})\n    //https://disease.sh/v3/covid-19/historical/all?lastdays=120\n    const options = {\n        legend: {\n            display: false,\n        },\n        elements: {\n            points: {\n                radius: 0,\n            },\n        },\n        maintainAspectRatio: false,\n        tooltips: {\n            mode: \"index\",\n            intersect: false,\n            callbacks: {\n                lable: function (tooltipItem, data) {\n                    return numeral(tooltipItem.format(\"+0,0\"))\n                }\n            }\n        },\n        scales: {\n            xAxes: [{\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            }],\n            yAxes: [\n                {\n                    gridLines: {\n                        display: false,\n                    },\n                    ticks: {\n                        callback: function (value, index, values) {\n                            return numeral(value).format(\"0a\");\n                        }\n                    }\n                }\n            ]\n        }\n    }\n\n\n    const buildChartData = (data, casesType) => {\n        const chartData = []\n        let lastDataPoint;\n        for (let date in data.cases) {\n            if (lastDataPoint) {\n                let newDataPoint = {\n                    x: date,\n                    y: data[casesType][date] - lastDataPoint,\n                }\n                chartData.push(newDataPoint)\n            }\n            lastDataPoint = data[casesType][date]\n        };\n        return chartData\n    }\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n                .then(response => { return response.json() })\n                .then(data => {\n                    let chartData = buildChartData(data, casesType)\n                    console.log(\"graph\", data)\n                    setData(chartData)\n                })\n        }\n        fetchData()\n    }, [casesType])\n\n\n    return (\n        <div className={props.className}>\n            {data?.length > 0 && (<Line\n\n                data={{ datasets: [{ data: data, borderColor: \"#CC1034\", backgroundColor: \"rgba(204,16,52,0.5\", data: data }] }}\n                options={options}\n            />)}\n        </div>\n    )\n}\n\nexport default LineGraph\n","import React from 'react'\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            {`< Made with ❤️  by`}<a href=\"https://aniruddhparwal.github.io\" target=\"_blank\"> {\"Aniruddh Parwal \"}</a> {`/>`}\n        </div>\n    )\n}\n\nexport default Footer\n","import { Card, CardContent, FormControl, MenuItem, Select } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport InfoBox from './Components/InfoBox';\nimport Table from './Components/Table'\nimport Map from './Components/Map';\nimport './CSS/style.css';\nimport { prettyPrintStat, sortData } from './util';\nimport LineGraph from './Components/LineGraph';\nimport \"leaflet/dist/leaflet.css\"\nimport Footer from './Components/Footer';\n\nfunction App() {\n\n  const [countries, setContries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\")\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 })\n  const [mapZoom, setMapZoom] = useState(3)\n  const [mapCountries, setMapCountries] = useState([]);\n  const [caseType, setCaseType] = useState(\"cases\")\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2,\n            }\n          ));\n          const sortedData = sortData(data)\n          setTableData(sortedData)\n          setMapCountries(data);\n          setContries(countries)\n        })\n    }\n    getCountriesData()\n  }, [])\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data)\n      });\n  }, [])\n\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode)\n        setCountryInfo(data)\n        if (countryCode === 'worldwide') {\n          setMapCenter([34.80746, -40.4796])\n          setMapZoom(3)\n        } else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n\n          setMapZoom(4)\n        }\n      })\n  }\n\n  console.log(\"Country Info >>\", countryInfo)\n  return (\n    <div className=\"app\">\n      <div className=\"app__container\">\n        <div className=\"app__left\">\n          <div className=\"app__header\">\n            <h1>COVID19-TRACKER</h1>\n            <FormControl className=\"app__dropdown\">\n              <Select\n                variant=\"outlined\"\n                value={country}\n                onChange={onCountryChange}\n              >\n                <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                {countries.map((country) => { return (<MenuItem value={country.value}>{country.name}</MenuItem>) })}\n              </Select>\n            </FormControl>\n          </div>\n          <div className=\"app__stats\">\n            <InfoBox isRed={true} active={caseType === \"cases\"} onClick={e => setCaseType('cases')} title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n            <InfoBox active={caseType === \"recovered\"} onClick={e => setCaseType('recovered')} title=\"Recoverd\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n            <InfoBox isRed={true} active={caseType === \"deaths\"} onClick={e => setCaseType('deaths')} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n          </div>\n          <Map\n            casesType={caseType}\n            countries={mapCountries}\n            center={mapCenter}\n            zoom={mapZoom}\n          />\n        </div>\n        <Card className=\"app__right\">\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3 className=\"app__graphTitle\">Worldwide New {caseType}</h3>\n            <LineGraph className=\"app__graph\" casesType={caseType} />\n          </CardContent>\n        </Card>\n      </div >\n      <div className=\"app__footer\">\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}